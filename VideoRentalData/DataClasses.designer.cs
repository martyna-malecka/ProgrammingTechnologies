#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VideoRentalData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VideoRental")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertclient(client instance);
    partial void Updateclient(client instance);
    partial void Deleteclient(client instance);
    partial void Insertvideo(video instance);
    partial void Updatevideo(video instance);
    partial void Deletevideo(video instance);
    partial void Insertrental(rental instance);
    partial void Updaterental(rental instance);
    partial void Deleterental(rental instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::VideoRentalData.Properties.Settings.Default.VideoRentalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<client> client
		{
			get
			{
				return this.GetTable<client>();
			}
		}
		
		public System.Data.Linq.Table<video> video
		{
			get
			{
				return this.GetTable<video>();
			}
		}
		
		public System.Data.Linq.Table<rental> rental
		{
			get
			{
				return this.GetTable<rental>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.client")]
	public partial class client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstName;
		
		private string _lastName;
		
		private int _debt;
		
		private EntitySet<rental> _rental;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OndebtChanging(int value);
    partial void OndebtChanged();
    #endregion
		
		public client()
		{
			this._rental = new EntitySet<rental>(new Action<rental>(this.attach_rental), new Action<rental>(this.detach_rental));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_debt", DbType="Int NOT NULL")]
		public int debt
		{
			get
			{
				return this._debt;
			}
			set
			{
				if ((this._debt != value))
				{
					this.OndebtChanging(value);
					this.SendPropertyChanging();
					this._debt = value;
					this.SendPropertyChanged("debt");
					this.OndebtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_rental", Storage="_rental", ThisKey="id", OtherKey="clientId")]
		public EntitySet<rental> rental
		{
			get
			{
				return this._rental;
			}
			set
			{
				this._rental.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_rental(rental entity)
		{
			this.SendPropertyChanging();
			entity.client = this;
		}
		
		private void detach_rental(rental entity)
		{
			this.SendPropertyChanging();
			entity.client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.video")]
	public partial class video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _genre;
		
		private string _director;
		
		private int _year;
		
		private string _medium;
		
		private bool _available;
		
		private EntitySet<rental> _rental;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OngenreChanging(string value);
    partial void OngenreChanged();
    partial void OndirectorChanging(string value);
    partial void OndirectorChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnmediumChanging(string value);
    partial void OnmediumChanged();
    partial void OnavailableChanging(bool value);
    partial void OnavailableChanged();
    #endregion
		
		public video()
		{
			this._rental = new EntitySet<rental>(new Action<rental>(this.attach_rental), new Action<rental>(this.detach_rental));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genre", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string genre
		{
			get
			{
				return this._genre;
			}
			set
			{
				if ((this._genre != value))
				{
					this.OngenreChanging(value);
					this.SendPropertyChanging();
					this._genre = value;
					this.SendPropertyChanged("genre");
					this.OngenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_director", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string director
		{
			get
			{
				return this._director;
			}
			set
			{
				if ((this._director != value))
				{
					this.OndirectorChanging(value);
					this.SendPropertyChanging();
					this._director = value;
					this.SendPropertyChanged("director");
					this.OndirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medium", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string medium
		{
			get
			{
				return this._medium;
			}
			set
			{
				if ((this._medium != value))
				{
					this.OnmediumChanging(value);
					this.SendPropertyChanging();
					this._medium = value;
					this.SendPropertyChanged("medium");
					this.OnmediumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_available", DbType="Bit NOT NULL")]
		public bool available
		{
			get
			{
				return this._available;
			}
			set
			{
				if ((this._available != value))
				{
					this.OnavailableChanging(value);
					this.SendPropertyChanging();
					this._available = value;
					this.SendPropertyChanged("available");
					this.OnavailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="video_rental", Storage="_rental", ThisKey="id", OtherKey="videoId")]
		public EntitySet<rental> rental
		{
			get
			{
				return this._rental;
			}
			set
			{
				this._rental.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_rental(rental entity)
		{
			this.SendPropertyChanging();
			entity.video = this;
		}
		
		private void detach_rental(rental entity)
		{
			this.SendPropertyChanging();
			entity.video = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rental")]
	public partial class rental : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _clientId;
		
		private int _videoId;
		
		private System.DateTime _rentDate;
		
		private System.DateTime _dueDate;
		
		private bool _returned;
		
		private EntityRef<client> _client;
		
		private EntityRef<video> _video;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnclientIdChanging(int value);
    partial void OnclientIdChanged();
    partial void OnvideoIdChanging(int value);
    partial void OnvideoIdChanged();
    partial void OnrentDateChanging(System.DateTime value);
    partial void OnrentDateChanged();
    partial void OndueDateChanging(System.DateTime value);
    partial void OndueDateChanged();
    partial void OnreturnedChanging(bool value);
    partial void OnreturnedChanged();
    #endregion
		
		public rental()
		{
			this._client = default(EntityRef<client>);
			this._video = default(EntityRef<video>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clientId", DbType="Int NOT NULL")]
		public int clientId
		{
			get
			{
				return this._clientId;
			}
			set
			{
				if ((this._clientId != value))
				{
					if (this._client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclientIdChanging(value);
					this.SendPropertyChanging();
					this._clientId = value;
					this.SendPropertyChanged("clientId");
					this.OnclientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videoId", DbType="Int NOT NULL")]
		public int videoId
		{
			get
			{
				return this._videoId;
			}
			set
			{
				if ((this._videoId != value))
				{
					if (this._video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvideoIdChanging(value);
					this.SendPropertyChanging();
					this._videoId = value;
					this.SendPropertyChanged("videoId");
					this.OnvideoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rentDate", DbType="Date NOT NULL")]
		public System.DateTime rentDate
		{
			get
			{
				return this._rentDate;
			}
			set
			{
				if ((this._rentDate != value))
				{
					this.OnrentDateChanging(value);
					this.SendPropertyChanging();
					this._rentDate = value;
					this.SendPropertyChanged("rentDate");
					this.OnrentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dueDate", DbType="Date NOT NULL")]
		public System.DateTime dueDate
		{
			get
			{
				return this._dueDate;
			}
			set
			{
				if ((this._dueDate != value))
				{
					this.OndueDateChanging(value);
					this.SendPropertyChanging();
					this._dueDate = value;
					this.SendPropertyChanged("dueDate");
					this.OndueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_returned", DbType="Bit NOT NULL")]
		public bool returned
		{
			get
			{
				return this._returned;
			}
			set
			{
				if ((this._returned != value))
				{
					this.OnreturnedChanging(value);
					this.SendPropertyChanging();
					this._returned = value;
					this.SendPropertyChanged("returned");
					this.OnreturnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_rental", Storage="_client", ThisKey="clientId", OtherKey="id", IsForeignKey=true)]
		public client client
		{
			get
			{
				return this._client.Entity;
			}
			set
			{
				client previousValue = this._client.Entity;
				if (((previousValue != value) 
							|| (this._client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._client.Entity = null;
						previousValue.rental.Remove(this);
					}
					this._client.Entity = value;
					if ((value != null))
					{
						value.rental.Add(this);
						this._clientId = value.id;
					}
					else
					{
						this._clientId = default(int);
					}
					this.SendPropertyChanged("client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="video_rental", Storage="_video", ThisKey="videoId", OtherKey="id", IsForeignKey=true)]
		public video video
		{
			get
			{
				return this._video.Entity;
			}
			set
			{
				video previousValue = this._video.Entity;
				if (((previousValue != value) 
							|| (this._video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._video.Entity = null;
						previousValue.rental.Remove(this);
					}
					this._video.Entity = value;
					if ((value != null))
					{
						value.rental.Add(this);
						this._videoId = value.id;
					}
					else
					{
						this._videoId = default(int);
					}
					this.SendPropertyChanged("video");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
